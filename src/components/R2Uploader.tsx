"use client";

import React, { useState, useEffect } from "react";
import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { showSuccess, showError, showLoading, dismissToast } from "@/utils/toast";
import { v4 as uuidv4 } from "uuid";
import { UploadCloud } from "lucide-react";

// IMPORTANT: For learning purposes, R2 keys are exposed on the client side.
// This is HIGHLY INSECURE for production applications.
// In production, use pre-signed URLs generated by a backend.
const R2_ACCOUNT_ID = import.meta.env.VITE_R2_ACCOUNT_ID;
const R2_BUCKET_NAME = import.meta.env.VITE_R2_BUCKET_NAME;
const R2_ACCESS_KEY_ID = import.meta.env.VITE_R2_ACCESS_KEY_ID;
const R2_SECRET_ACCESS_KEY = import.meta.env.VITE_R2_SECRET_ACCESS_KEY;

const R2Uploader: React.FC = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploading, setUploading] = useState(false);
  const [useRandomFilename, setUseRandomFilename] = useState(false);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files.length > 0) {
      setSelectedFile(event.target.files[0]);
    } else {
      setSelectedFile(null);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      showError("Please select a file first.");
      return;
    }

    if (!R2_ACCOUNT_ID || !R2_BUCKET_NAME || !R2_ACCESS_KEY_ID || !R2_SECRET_ACCESS_KEY) {
      showError("R2 environment variables are not set. Check your Cloudflare Pages ENV settings.");
      return;
    }

    setUploading(true);
    const toastId = showLoading(`Uploading ${selectedFile.name}...`);

    try {
      const client = new S3Client({
        region: "auto", // Cloudflare R2 uses "auto" region
        endpoint: `https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com`,
        credentials: {
          accessKeyId: R2_ACCESS_KEY_ID,
          secretAccessKey: R2_SECRET_ACCESS_KEY,
        },
      });

      // Determine the filename
      let fileName = selectedFile.name;
      if (useRandomFilename) {
        const fileExtension = fileName.split(".").pop();
        fileName = `${uuidv4()}${fileExtension ? `.${fileExtension}` : ''}`;
      }

      // Read the file as an ArrayBuffer
      const arrayBuffer = await selectedFile.arrayBuffer();

      const command = new PutObjectCommand({
        Bucket: R2_BUCKET_NAME,
        Key: fileName, // Use the determined filename
        Body: arrayBuffer, // Use ArrayBuffer as Body
        ContentType: selectedFile.type,
        ChecksumAlgorithm: "SHA256", // Use a supported checksum algorithm
      });

      await client.send(command);

      showSuccess(`File ${selectedFile.name} uploaded successfully as ${fileName}!`, toastId);
      setSelectedFile(null); // Reset file input
    } catch (error) {
      console.error("Failed to upload file to R2:", error);
      showError(`Failed to upload file: ${(error as Error).message}`, toastId);
    } finally {
      setUploading(false);
      dismissToast(toastId); // Dismiss loading toast in finally block
    }
  };

  return (
    <Card className="w-full max-w-md mx-auto p-6 shadow-lg rounded-lg">
      <CardHeader className="text-center">
        <CardTitle className="text-2xl font-bold flex items-center justify-center gap-2">
          <UploadCloud className="h-6 w-6" /> Upload to Cloudflare R2
        </CardTitle>
        <CardDescription>
          Upload files directly from your browser to an R2 bucket.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="grid w-full items-center gap-1.5">
          <Label htmlFor="file">Select File</Label>
          <Input id="file" type="file" onChange={handleFileChange} disabled={uploading} />
        </div>
        <div className="flex items-center space-x-2">
          <Checkbox
            id="random-filename"
            checked={useRandomFilename}
            onCheckedChange={(checked) => setUseRandomFilename(!!checked)}
            disabled={uploading}
          />
          <Label htmlFor="random-filename">Randomize File Name</Label>
        </div>
        <Button onClick={handleUpload} disabled={!selectedFile || uploading} className="w-full">
          {uploading ? "Uploading..." : "Upload to R2"}
        </Button>
        {selectedFile && (
          <p className="text-sm text-muted-foreground mt-2">Selected file: {selectedFile.name}</p>
        )}
      </CardContent>
    </Card>
  );
};

export default R2Uploader;